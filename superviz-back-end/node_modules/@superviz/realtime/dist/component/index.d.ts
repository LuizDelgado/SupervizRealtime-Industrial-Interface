import { Logger, Observable } from '../utils';
import { Auth, ComponentNames, Params } from './types';
import { Channel } from '../services/channel/channel';
export declare class Realtime extends Observable {
    name: ComponentNames.REALTIME;
    private ioc;
    private connectionLimit;
    protected logger: Logger;
    private localParticipant;
    private state;
    private channels;
    constructor(auth: Auth, params: Params);
    /**
     * @function start
     * @description start the realtime component and get everything ready to start connecting to channels.
     * @returns {Promise<void>}
     */
    private start;
    /**
     * @function destroy
     * @description destroy the realtime component and disconnect from all channels
     */
    destroy(): void;
    /**
     * @function changeState
     * @description change realtime component state and publish state to client
     * @param state
     * @returns {void}
     */
    private changeState;
    /**
     * @function connect
     * @description - connect to a channel and return the channel instance. If the channel already exists, it will return a saved instance of the channel, otherwise, it will create a connection from zero.
     * @param name - channel name
     * @returns {Promise<Channel>}
     */
    connect(name: string): Promise<Channel>;
    /**
     * @function disconnectToAllChannels
     * @description - disconnect from all channels
     * @returns {void}
     */
    private disconnectFromAllChannels;
    /**
     * @function setConfigs
     * @description - set configs for the realtime component, taking in consideration the authentication method (apiKey or secret) and the params passed by the user (if there is or not a participant)
     * @param auth - authentication method
     * @param params - params passed by the user
     * @returns {void}
     */
    private setConfigs;
    /**
     * @function setApiUrl
     * @description - set the api url based on the environment
     * @returns {Promise<void>}
     */
    private setApiUrl;
    /**
     * @function validateLimits
     * @description - validate if the user reached the limit usage of the Real-Time Data Engine
     * @returns {Promise<void>}
     */
    private validateLimits;
    /**
     * @function validateSecretAndClientId
     * @description - fetch apiKey using the secret and clientId to confirm that they are valid
     * @returns {Promise<void>}
     */
    private validateSecretAndClientId;
    /**
     * @function validateApiKey
     * @description - validate if the apiKey is valid
     * @returns {Promise<void>}
     */
    private validateApiKey;
    /**
     * @function validateParams
     * @description - validate the params passed by the user. Guarantee that they are valid in type, in whether or not they are present, etc
     */
    private validateParams;
    /**
     * @function validateAuth
     * @description - validate the authentication method by runtime (browser or server) and auth type (apiKey or secret)
     * @param auth - authentication method
     * @returns {void}
     */
    private validateAuth;
}
