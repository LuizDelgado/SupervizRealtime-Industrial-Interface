import type { Subscribe, Unsubscribe } from '../../types/observable';
import { Logger } from '../logger';
import { Observer } from '../observer';
export declare abstract class Observable {
    protected abstract logger: Logger;
    protected observers: Record<string, Observer>;
    /**
     * @function subscribe
     * @description Subscribe to an event
     * @param type - event type
     * @param listener - event callback
     * @returns {void}
     */
    subscribe: Subscribe;
    /**
     * @function unsubscribe
     * @description Unsubscribe from an event
     * @param type - event type
     * @returns {void}
     */
    unsubscribe: Unsubscribe;
    /**
     * @function publish
     * @description Publish an event to client
     * @param type - event type
     * @param data - event data
     * @returns {void}
     */
    protected publish: (type: string, data?: unknown) => void;
}
